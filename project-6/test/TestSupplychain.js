// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originCarFactoryID = accounts[1]
    const originCarFactoryName = "John Doe"
    const originCarFactoryInformation = "Yarray Valley"
    const originCarFactoryLatitude = "-38.239770"
    const originCarFactoryLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.toWei(1, "ether")
    var carState = 0
    const dealerID = accounts[2]
    const consumerID = accounts[3]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("CarFactory: accounts[1] ", accounts[1])
    console.log("Dealer: accounts[2] ", accounts[2])
    console.log("Consumer: accounts[3] ", accounts[3])

    // 1st Test
    it("Testing smart contract function buildCarPart() that allows a CarFactory to build Car Part car", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event CarPartBuilt()
        var event = supplyChain.CarPartBuilt()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)

        // Mark an car as CarPartBuilt by calling function buildCarPart()
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferOne = await supplyChain.fetchCarBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchCarBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid car SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid car UPC')
        assert.equal(resultBufferOne[2], originCarFactoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCarFactoryID, 'Error: Missing or Invalid originCarFactoryID')
        assert.equal(resultBufferOne[4], originCarFactoryName, 'Error: Missing or Invalid originCarFactoryName')
        assert.equal(resultBufferOne[5], originCarFactoryInformation, 'Error: Missing or Invalid originCarFactoryInformation')
        assert.equal(resultBufferOne[6], originCarFactoryLatitude, 'Error: Missing or Invalid originCarFactoryLatitude')
        assert.equal(resultBufferOne[7], originCarFactoryLongitude, 'Error: Missing or Invalid originCarFactoryLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid car State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 2nd Test
    it("Testing smart contract function buildCar() that allows a CarFactory to build car", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event CarBuilt()
        var event = supplyChain.CarBuilt()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })

        // Mark an car as Car Built by calling function buildCar()
        await supplyChain.buildCar(upc, { from: originCarFactoryID })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferTwo = await supplyChain.fetchCarBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid car State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 3rd Test
    it("Testing smart contract function sellCar() that allows a CarFactory to sell car", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })
        await supplyChain.buildCar(upc, { from: originCarFactoryID })

        // Mark an car as ForSale by calling function sellCar()
        await supplyChain.sellCar(upc, productPrice, { from: originCarFactoryID })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferTwo = await supplyChain.fetchCarBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid car State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 4th Test
    it("Testing smart contract function buyCar() that allows a dealer to buy car", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })
        await supplyChain.buildCar(upc, { from: originCarFactoryID })
        await supplyChain.sellCar(upc, productPrice, { from: originCarFactoryID })
        await supplyChain.addDealer(dealerID)

        // Mark an car as Sold by calling function buyCar()
        await supplyChain.buyCar(upc, { from: dealerID, value: productPrice })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferTwo = await supplyChain.fetchCarBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid car State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 5th Test
    it("Testing smart contract function shipCar() that allows a dealer to ship car", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })
        await supplyChain.buildCar(upc, { from: originCarFactoryID })
        await supplyChain.sellCar(upc, productPrice, { from: originCarFactoryID })
        await supplyChain.addDealer(dealerID)
        await supplyChain.buyCar(upc, { from: dealerID, value: productPrice })

        // Mark an car as Sold by calling function shipCar()
        await supplyChain.shipItem(upc, { from: dealerID })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferTwo = await supplyChain.fetchCarBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid car State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 6th Test
    it("Testing smart contract function receiveCar() that allows a dealer to mark car received", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Received()
        var event = supplyChain.Received()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })
        await supplyChain.buildCar(upc, { from: originCarFactoryID })
        await supplyChain.sellCar(upc, productPrice, { from: originCarFactoryID })
        await supplyChain.addDealer(dealerID)
        await supplyChain.buyCar(upc, { from: dealerID, value: productPrice })
        await supplyChain.shipItem(upc, { from: dealerID })

        // Mark an car as Sold by calling function buyCar()
        await supplyChain.receiveItem(upc, { from: dealerID })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferTwo = await supplyChain.fetchCarBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid car State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 7th Test
    it("Testing smart contract function purchaseCar() that allows a consumer to purchase car", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })
        await supplyChain.buildCar(upc, { from: originCarFactoryID })
        await supplyChain.sellCar(upc, productPrice, { from: originCarFactoryID })
        await supplyChain.addDealer(dealerID)
        await supplyChain.buyCar(upc, { from: dealerID, value: productPrice })
        await supplyChain.shipItem(upc, { from: dealerID })
        await supplyChain.receiveItem(upc, { from: dealerID })

        // Mark an car as Sold by calling function buyCar()
        await supplyChain.purchaseItem(upc, { from: consumerID })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferTwo = await supplyChain.fetchCarBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid car State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 8th Test
    it("Testing smart contract function fetchCarBufferOne() that allows anyone to fetch car details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferOne = await supplyChain.fetchCarBufferOne.call(upc)

        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid car SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid car UPC')
        assert.equal(resultBufferOne[2], originCarFactoryID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originCarFactoryID, 'Error: Missing or Invalid originCarFactoryID')
        assert.equal(resultBufferOne[4], originCarFactoryName, 'Error: Missing or Invalid originCarFactoryName')
        assert.equal(resultBufferOne[5], originCarFactoryInformation, 'Error: Missing or Invalid originCarFactoryInformation')
        assert.equal(resultBufferOne[6], originCarFactoryLatitude, 'Error: Missing or Invalid originCarFactoryLatitude')
        assert.equal(resultBufferOne[7], originCarFactoryLongitude, 'Error: Missing or Invalid originCarFactoryLongitude')
    })

    // 9th Test
    it("Testing smart contract function fetchCarBufferTwo() that allows anyone to fetch car details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // prerequisite:
        await supplyChain.addCarFactory(originCarFactoryID)
        await supplyChain.buildCarPart(upc, originCarFactoryID, originCarFactoryName, originCarFactoryInformation, originCarFactoryLatitude, originCarFactoryLongitude, productNotes, { from: originCarFactoryID })

        // Retrieve the just now saved car from blockchain by calling function fetchCar()
        const resultBufferTwo = await supplyChain.fetchCarBufferTwo.call(upc)

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid car SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid car UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], 0, 'Error: Missing or Invalid car State')
        assert.equal(resultBufferTwo[6], dealerID, 'Error: Missing or Invalid dealerID')
        assert.equal(resultBufferTwo[7], consumerID, 'Error: Missing or Invalid consumerID')
    })

});

