pragma solidity >=0.4.24;
// Define a contract 'Supplychain'

import "../carcore/Ownable.sol";
import "../caraccesscontrol/CarFactoryRole.sol";
import "../caraccesscontrol/DealerRole.sol";
import "../caraccesscontrol/ConsumerRole.sol";

contract SupplyChain is Ownable, CarFactoryRole, DealerRole, ConsumerRole {

  // Define 'owner'
  // *Already defined in Ownable

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'cars' that maps the UPC to an Car.
  mapping (uint => Car) cars;

  // Define a public mapping 'carsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) carsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    CarPartBuilt,  // 0
    CarBuilt,  // 1
    ForSale,    // 2
    Sold,       // 3
    Shipped,    // 4
    Received,   // 5
    Purchased   // 6
    }

  State constant defaultState = State.CarPartBuilt;

  // Define a struct 'Car' with the following fields:
  struct Car {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the CarFactory, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address payable originCarFactoryID; // Metamask-Ethereum address of the CarFactory
    string  originCarFactoryName; // CarFactory Name
    string  originCarFactoryInformation;  // CarFactory Information
    string  originCarFactoryLatitude; // CarFactory Latitude
    string  originCarFactoryLongitude;  // CarFactory Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   carState;  // Product State as represented in the enum above
    address dealerID; // Metamask-Ethereum address of the Dealer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event CarPartBuilt(uint upc);
  event CarBuilt(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  // *Already defined in Ownable

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = cars[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    cars[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an car.state of a upc is CarPartBuilt
  modifier carPartBuilt(uint _upc) {
    require(cars[_upc].carState == State.CarPartBuilt);
    _;
  }

  // Define a modifier that checks if an car.state of a upc is CarBuilt
  modifier carBuilt(uint _upc) {
    require(cars[_upc].carState == State.CarBuilt);
    _;
  }

  // Define a modifier that checks if an car.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(cars[_upc].carState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an car.state of a upc is Sold
  modifier sold(uint _upc) {
    require(cars[_upc].carState == State.Sold);
    _;
  }

  // Define a modifier that checks if an car.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(cars[_upc].carState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an car.state of a upc is Received
  modifier received(uint _upc) {
    require(cars[_upc].carState == State.Received);
    _;
  }

  // Define a modifier that checks if an car.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(cars[_upc].carState == State.Purchased);
    _;
  }

  // In the constructor set 'sku' to 1 and set 'upc' to 1
  constructor() public payable {
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public onlyOwner() {
      selfdestruct(msg.sender);
  }

  // Define a function 'buildCarPart' that allows a CarFactory to mark an car 'CarPartBuilt'
  function buildCarPart(uint _upc, address payable _originCarFactoryID, string memory _originCarFactoryName, string memory _originCarFactoryInformation, string  memory _originCarFactoryLatitude, string  memory _originCarFactoryLongitude, string memory _productNotes) public
  onlyCarFactory()
  {
    // Add new car with state BuildCarPart
    cars[_upc] = Car({
      sku: sku,
      upc: _upc,
      ownerID: _originCarFactoryID,
      originCarFactoryID: _originCarFactoryID,
      originCarFactoryName: _originCarFactoryName,
      originCarFactoryInformation: _originCarFactoryInformation,
      originCarFactoryLatitude: _originCarFactoryLatitude,
      originCarFactoryLongitude: _originCarFactoryLongitude,
      productID: sku + _upc,
      productNotes: _productNotes,
      productPrice: 0,
      carState: State.CarPartBuilt,
      dealerID: address(0),
      consumerID: address(0)
    });
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit CarPartBuilt(_upc);
  }

  // Define a function 'buildCar' that allows a CarFactory to mark an car 'CarBuilt'
  function buildCar(uint _upc) public onlyCarFactory()
  // Call modifier to check if upc has passed previous supply chain stage
  carPartBuilt(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(cars[_upc].originCarFactoryID)
  {
    // Update the appropriate fields
    cars[_upc].carState = State.CarBuilt;
    // Emit the appropriate event
    emit CarBuilt(_upc);
  }

  // Define a function 'sellCar' that allows a CarFactory to mark an car 'ForSale'
  function sellCar(uint _upc, uint _price) public onlyCarFactory()
  // Call modifier to check if upc has passed previous supply chain stage
  carBuilt(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(cars[_upc].originCarFactoryID)
  {
    // Update the appropriate fields
    cars[_upc].carState = State.ForSale;
    cars[_upc].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyCar' that allows the disributor to mark an car 'Sold'
  // Use the above defined modifiers to check if the car is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyCar(uint _upc) public payable onlyDealer()
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(cars[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    {

    // Update the appropriate fields - ownerID, DealerID, carState
    cars[_upc].ownerID = msg.sender;
    cars[_upc].dealerID = msg.sender;
    cars[_upc].carState = State.Sold;
    // Transfer money to CarFactory
    cars[_upc].originCarFactoryID.transfer(cars[_upc].productPrice);
    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipCar' that allows the Dealer to mark an car 'Shipped'
  // Use the above modifers to check if the car is sold
  function shipCar(uint _upc) public onlyDealer()
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(cars[_upc].dealerID)
    {
    // Update the appropriate fields
    cars[_upc].carState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveCar' that allows the Dealer to mark an car 'Received'
  // Use the above modifiers to check if the car is shipped
  function receiveCar(uint _upc) public onlyDealer()
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, carState
    cars[_upc].ownerID = msg.sender;
    cars[_upc].carState = State.Received;

    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'purchaseCar' that allows the consumer to mark an car 'Purchased'
  // Use the above modifiers to check if the car is received
  function purchaseCar(uint _upc) public onlyConsumer()
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, carState
    cars[_upc].ownerID = msg.sender;
    cars[_upc].consumerID = msg.sender;
    cars[_upc].carState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchCarBufferOne' that fetches the data
  function fetchCarBufferOne(uint _upc) public view returns
  (
  uint    carSKU,
  uint    carUPC,
  address ownerID,
  address originCarFactoryID,
  string  memory originCarFactoryName,
  string  memory originCarFactoryInformation,
  string  memory originCarFactoryLatitude,
  string  memory originCarFactoryLongitude
  )
  {
  // Assign values to the 8 parameters
    carSKU = cars[_upc].sku;
    carUPC = cars[_upc].upc;
    ownerID = cars[_upc].ownerID;
    originCarFactoryID = cars[_upc].originCarFactoryID;
    originCarFactoryName = cars[_upc].originCarFactoryName;
    originCarFactoryInformation = cars[_upc].originCarFactoryInformation;
    originCarFactoryLatitude = cars[_upc].originCarFactoryLatitude;
    originCarFactoryLongitude = cars[_upc].originCarFactoryLongitude;

  return
  (
  carSKU,
  carUPC,
  ownerID,
  originCarFactoryID,
  originCarFactoryName,
  originCarFactoryInformation,
  originCarFactoryLatitude,
  originCarFactoryLongitude
  );
  }

  // Define a function 'fetchCarBufferTwo' that fetches the data
  function fetchCarBufferTwo(uint _upc) public view returns
  (
  uint    carSKU,
  uint    carUPC,
  uint    productID,
  string  memory productNotes,
  uint    productPrice,
  uint    carState,
  address dealerID,
  address consumerID
  )
  {
    // Assign values to the 8 parameters
    carSKU = cars[_upc].sku;
    carUPC = cars[_upc].upc;
    productID = cars[_upc].productID;
    productNotes = cars[_upc].productNotes;
    productPrice = cars[_upc].productPrice;
    carState = uint(cars[_upc].carState);
    dealerID = cars[_upc].dealerID;
    consumerID = cars[_upc].consumerID;


  return
  (
  carSKU,
  carUPC,
  productID,
  productNotes,
  productPrice,
  carState,
  dealerID,
  consumerID
  );
  }
}
